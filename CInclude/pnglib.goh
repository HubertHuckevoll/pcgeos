#include <geos.h>
#include <stdio.h>
#include <Ansi/stdlib.h>
#include <Ansi/string.h>
#include <graphics.h>
#include <vm.h>
#include <hugearr.h>
#include <zlib.h>
#include <file.h>
#include <heap.h>

// PNG-Chunks
#define CHUNK_IHDR 0x49484452  // "IHDR"
#define CHUNK_IDAT 0x49444154  // "IDAT"
#define CHUNK_IEND 0x49454E44  // "IEND"
#define CHUNK_PLTE 0x504C5445  // "PLTE"

//#define CHUNK_SIZE 4096  // 8 KB Häppchen = 8192
#define CHUNK_SIZE 8192  // 8 KB Häppchen = 8192

// PNG signature
const unsigned char PNG_SIGNATURE[8] = {0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A};

// max palette entries
#define MAX_PALETTE_ENTRIES 256

// max IDAT chunk entries
#define MAX_IDAT_CHUNKS 10

// Struktur für die IHDR-Daten
typedef struct {
    unsigned long width;
    unsigned long height;
    unsigned char bitDepth;
    unsigned char colorType;
    unsigned char compressionMethod;
    unsigned char filterMethod;
    unsigned char interlaceMethod;
} IHDRData;

// Struktur für den ChunkHeader
typedef struct {
    unsigned long length;
    unsigned long type;
} ChunkHeader;

// Structure to hold the RGB color of a palette entry
typedef struct {
    unsigned char red;
    unsigned char green;
    unsigned char blue;
} PaletteEntry;

// IDAT Chunk entry
typedef struct {
    unsigned long length;
    unsigned long chunkPos;
} IDATChunkEntry;

// IDAT parsing state struct
typedef struct {
    z_stream strm;
    MemHandle inHan;
    unsigned char *in;
    MemHandle outHan;
    unsigned char *out;
    unsigned long rowBufferOffset;
    MemHandle currentRowHan;
    unsigned char *currentRow;
    MemHandle previousRowHandle;
    unsigned char *previousRow;
    unsigned long lineNo;
    unsigned long rowBytes;
    unsigned long bytesPerPixel;
    unsigned long bytesToRead;
    unsigned long length;
    unsigned long have;
    unsigned long outBufferPos;

    int idatNumChunks;
    int idatChunkIdx;
    IDATChunkEntry idatChunks[MAX_IDAT_CHUNKS];

    FileHandle file;
    IHDRData ihdr;
} IDATState;

// PLTE Chunk entry
typedef struct {
    unsigned long length;
    unsigned long chunkPos;
} PLTEChunkEntry;

// Filtertypen gemäß PNG-Spezifikation
#define FILTER_NONE    0
#define FILTER_SUB     1
#define FILTER_UP      2
#define FILTER_AVERAGE 3
#define FILTER_PAETH   4

// Color Types
#define PNG_COLOR_TYPE_GREY        0   /* Grayscale */
#define PNG_COLOR_TYPE_RGB         2   /* Truecolor */
#define PNG_COLOR_TYPE_PALETTE     3   /* Indexed-color */
#define PNG_COLOR_TYPE_GREY_ALPHA  4   /* Grayscale with alpha */
#define PNG_COLOR_TYPE_RGBA        6   /* Truecolor with alpha */

// Bit depths
#define PNG_BIT_DEPTH_1   1   /* 1-bit depth, used in grayscale and palette images */
#define PNG_BIT_DEPTH_2   2   /* 2-bit depth, used in grayscale and palette images */
#define PNG_BIT_DEPTH_4   4   /* 4-bit depth, used in grayscale and palette images */
#define PNG_BIT_DEPTH_8   8   /* 8-bit depth, used in grayscale, palette, truecolor, and grayscale-alpha images */
#define PNG_BIT_DEPTH_16  16  /* 16-bit depth, used in grayscale, truecolor, and grayscale-alpha images */

// format transformation flags
// Padding Flags
#define PNG_FT_PADDING_1_4            0x0001  // Bit 0: Add padding for 1-bit images to align data
#define PNG_FT_PADDING_2_4            0x0002  // Bit 1: Add padding for 2-bit images to align data
// Greyscale Palette Flags
#define PNG_FT_4_GREYSCALE_PALETTE    0x0004  // Bit 2: Use 4-level greyscale palette
#define PNG_FT_16_GREYSCALE_PALETTE   0x0008  // Bit 3: Use 16-level greyscale palette
#define PNG_FT_256_GREYSCALE_PALETTE  0x0010  // Bit 4: Use 256-level greyscale palette
// 16-bit to 8-bit Conversion Flags
#define PNG_FT_GREYSCALE_16_TO_8_BIT  0x0020  // Bit 5: Downsample 16-bit greyscale to 8-bit
#define PNG_FT_RGB_16_TO_8_BIT        0x0040  // Bit 6: Downsample 16-bit RGB to 8-bit per channel
#define PNG_FT_RGBA_16_TO_8_BIT       0x0080  // Bit 7: Downsample 16-bit RGBA to 8-bit per channel
// Alpha Removal Flags
#define PNG_FT_GREYSCALE_ALPHA_REMOVE 0x0100  // Bit 8: Remove alpha channel from greyscale images
#define PNG_FT_RGB_ALPHA_REMOVE       0x0200  // Bit 9: Remove alpha channel from RGB images

typedef struct {
    BMFormat fmt;           // Format of the image
    unsigned short transform; // Transformation flags
} OutputFormat;

/* API */
VMBlockHandle   _pascal _export pngConvertFile(FileHandle fileHan, VMFileHandle vmFile);

int             _pascal _export pngCheckHeader(FileHandle file);
void            _pascal _export pngProcessChunks(FileHandle file, IHDRData* ihdrData, IDATChunkEntry (*idatChunks)[MAX_IDAT_CHUNKS], int *idatNumChunks, PLTEChunkEntry* plteChunk);
BMFormat        _pascal _export pngWhatOutputFormat(int colorType, int bitDepth);
VMBlockHandle   _pascal _export pngInitiateOutputBitmap(VMFileHandle vmFile, IHDRData ihdrData, BMFormat fmt);
void            _pascal _export pngHandlePalette(FileHandle file, PLTEChunkEntry plteChunk, VMFileHandle vmFile, VMBlockHandle vmBlock);
IDATState       _pascal _export pngInitIDATProcessingState(FileHandle file, IDATChunkEntry* idatChunks, int idatNumChunks, IHDRData ihdr);
int             _pascal _export pngGetNextIDATScanline(IDATState* state);
void            _pascal _export pngPauseIDATProcessing(IDATState* state);
void            _pascal _export pngApplyGEOSFormatTransformations(IDATState* state);
void            _pascal _export pngWriteScanlineToBitmap(VMFileHandle vmFile, VMBlockHandle bitmapHandle, unsigned long lineNo, unsigned char* rowData);
void            _pascal _export pngResumeIDATProcessing(IDATState* state);
void            _pascal _export pngCleanupIDATProcessingState(IDATState* state);

/* Internal */
int abs(int x);
unsigned long swapEndian(unsigned long val);
static inline unsigned char paethPredictor(int a, int b, int c);
unsigned long calcBytesPerRow(unsigned long width, unsigned char colorType, unsigned char bitDepth);
unsigned long calcBytesPerPixel(unsigned char colorType, unsigned char bitDepth);
void removeAlphaChannel(unsigned char *data, unsigned long width, int colorType, RGBValue blendColor);
void convert16BitLineTo8Bit(unsigned char *line, unsigned long width, unsigned char colorType, unsigned char bitDepth);
void pad_1bit_to_4bit(unsigned char *input, unsigned int width, unsigned char colorType, unsigned char bitDepth);
void pad_2bit_to_4bit(unsigned char *input, unsigned int width, unsigned char colorType, unsigned char bitDepth);
void unfilterRow(unsigned char *data, unsigned char *previousRow, unsigned long bytesPerPixel, unsigned long rowBytes);
int nextIDATChunk(IDATState* state);
