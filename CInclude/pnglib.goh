#include <geos.h>
#include <stdio.h>
#include <Ansi/stdlib.h>
#include <Ansi/string.h>
#include "zlib.h"

#include "file.h"
#include "heap.h"

// PNG-Chunks
#define CHUNK_IHDR 0x49484452  // "IHDR"
#define CHUNK_IDAT 0x49444154  // "IDAT"
#define CHUNK_IEND 0x49454E44  // "IEND"

#define CHUNK_SIZE 8192  // 8 KB Häppchen

// Struktur für die IHDR-Daten
typedef struct {
    unsigned long width;
    unsigned long height;
    unsigned char bitDepth;
    unsigned char colorType;
    unsigned char compressionMethod;
    unsigned char filterMethod;
    unsigned char interlaceMethod;
} IHDRData;

// Struktur für den ChunkHeader
typedef struct {
    unsigned long length;
    unsigned long type;
} ChunkHeader;

const unsigned char PNG_SIGNATURE[8] = {0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A};

// Filtertypen gemäß PNG-Spezifikation
#define FILTER_NONE    0
#define FILTER_SUB     1
#define FILTER_UP      2
#define FILTER_AVERAGE 3
#define FILTER_PAETH   4

int abs(int x);
unsigned long swapEndian(unsigned long val);
static inline unsigned char paethPredictor(int a, int b, int c);
void unfilterImage(unsigned char *data, unsigned long width, unsigned char bitDepth, unsigned char colorType, unsigned char *previousRow, FileHandle oFile);
void processIDATChunks(FileHandle file, unsigned long length, unsigned long width, unsigned long height, unsigned char bitDepth, unsigned char colorType, FileHandle oFile);
void processPNGChunks(FileHandle file);
void writeOutputFile(FileHandle outputFile, unsigned char *data, unsigned long length, unsigned long width, unsigned long height);
//void writeOutputFile(FileHandle file, unsigned char *data, unsigned long length, unsigned long width);

FileHandle openOutputFile(unsigned long width, unsigned long height);
void closeOutputFile(FileHandle file);


int checkPNGHeader(FileHandle file);
int _pascal _export convertPNG();
