#include <geos.h>
#include <stdio.h>
#include <Ansi/stdlib.h>
#include <Ansi/string.h>
#include <graphics.h>
#include <vm.h>
#include <hugearr.h>
#include <zlib.h>
#include <file.h>
#include <heap.h>

// PNG-Chunks
#define CHUNK_IHDR 0x49484452  // "IHDR"
#define CHUNK_IDAT 0x49444154  // "IDAT"
#define CHUNK_IEND 0x49454E44  // "IEND"
#define CHUNK_PLTE 0x504C5445  // "PLTE"

#define CHUNK_SIZE 8192  // 8 KB Häppchen

// Struktur für die IHDR-Daten
typedef struct {
    unsigned long width;
    unsigned long height;
    unsigned char bitDepth;
    unsigned char colorType;
    unsigned char compressionMethod;
    unsigned char filterMethod;
    unsigned char interlaceMethod;
} IHDRData;

// Struktur für den ChunkHeader
typedef struct {
    unsigned long length;
    unsigned long type;
} ChunkHeader;

// IDAT parsing state struct
typedef struct {
    z_stream strm;
    MemHandle inHan;
    unsigned char *in;
    MemHandle outHan;
    unsigned char *out;
    unsigned long rowBufferOffset;
    MemHandle previousRowHandle;
    unsigned char *previousRow;
    unsigned long lineNo;
    unsigned long rowBytes;
    unsigned long bytesPerPixel;
    unsigned long bytesToRead;
    unsigned long length;
    unsigned long have;
    unsigned long outBufferPos;
    FileHandle file;
    IHDRData ihdr;
} IDATState;

// Structure to hold the RGB color of a palette entry
typedef struct {
    unsigned char red;
    unsigned char green;
    unsigned char blue;
} PaletteEntry;

// PNG signature
const unsigned char PNG_SIGNATURE[8] = {0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A};

// max palette entries
#define MAX_PALETTE_ENTRIES 256

// Filtertypen gemäß PNG-Spezifikation
#define FILTER_NONE    0
#define FILTER_SUB     1
#define FILTER_UP      2
#define FILTER_AVERAGE 3
#define FILTER_PAETH   4


VMBlockHandle _pascal _export convertPNG(FileHandle fileHan, VMFileHandle vmFile);
int checkPNGHeader(FileHandle file);
void processPNGChunks(FileHandle file, VMFileHandle vmFile, unsigned long* idatLength, IHDRData* ihdrData, unsigned long* idatChunkPos, VMBlockHandle* vmBlock);
void readPLTEChunk(FileHandle file, unsigned long length, VMFileHandle vmFile, VMBlockHandle vmBlock);
IDATState initIDATState(FileHandle file, unsigned long idatChunkPos, unsigned long length, IHDRData ihdr);
int processNextScanline(IDATState* state, unsigned char* rowBuffer);
void cleanupIDATState(IDATState* state);

VMBlockHandle initiateOutputBitmap(VMFileHandle vmFile, unsigned long width, unsigned long height, unsigned char bitDepth);
void writePixelLine(VMFileHandle vmFile, VMBlockHandle bitmapHandle, unsigned long lineNo, unsigned char* rowData);

int abs(int x);
unsigned long swapEndian(unsigned long val);
static inline unsigned char paethPredictor(int a, int b, int c);
unsigned long calcBytesPerRow(unsigned long width, unsigned char colorType, unsigned char bitDepth);
unsigned long calcBytesPerPixel(unsigned char colorType, unsigned char bitDepth);
void convertRGBAtoRGB(unsigned char *data, unsigned long width);
void convert16BitLineTo8Bit(unsigned char *line, unsigned long width);
void unfilterRow(unsigned char *data, unsigned char *previousRow, unsigned long bytesPerPixel, unsigned long rowBytes);
