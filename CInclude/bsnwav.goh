/************************************************
 *                                              *
 *      Projekt:        BestSound               *
 *                                              *
 *      Module:         NewWave-Library         *
 *                                              *
 *      File:           BSNWAV.GOH              *
 *                                              *
 *      Autor:          Dirk Lausecker          *
 *                                              *
 * 28.07.2000   DL      F�r ND �berarbeitet     *
 *                                              *
 ************************************************/

@include <stdapp.goh>
#include <sound.h>
#include <library.h>
#include <dirksnd.h>

@deflib bsnwav

/*-----------------------------------------------
 *      Macros
 *-----------------------------------------------*/

#define BSEXDACSTATUS(state)    ( (byte) ( (state) >> 16 ) )
#define BSEXBSSTATUS(state)     ( (byte) ( (state) & 0xff) )

/*-----------------------------------------------
 *      Constants
 *-----------------------------------------------*/

// driver check
#define BSNW_DRIVER_TEST_VALUE  5

// Displayformats Timedisplay
#define BSCPT_FULL_TIME         0
#define BSCPT_REST_TIME         1

// Samplingformats
#define BSWN_FORMAT_PCM         1
#define BSWN_FORMAT_IBM_ADPCM   259

// Chunktypes
#define CODE_RIFF       0x46464952
#define CODE_WAVE       0x45564157
#define CODE_fmt        0x20746d66
#define CODE_data       0x61746164

// Data Sources
#define BSNW_SOURCE_FILE        1
#define BSNW_SOURCE_CALL        2

/////////////////////////////////////////////////////////////////////
// PlayFlags
// Bits zur Parameter�bergabe an BSNWavePlayFile()

#define BSNW_SHOW_STATUS        0x01
// Display Statusbox for showing Rate/Bits/Channels and Time

#define BSNW_WAIT_FOR_FREE      0x02
// Waiting some seconds if the BSNWAV is used by another thread

#define BSNW_SHOW_ERROR_MSG     0x04
// Display error messages

#define BSNW_PLAY_LOOP          0x08
// Endless playing until BSNWaveStop() will be called
// CURRENTLY NOT SUPPORTED !!!

#define	BSNW_TEST_ONLY		0x10
// No playing ! Use this flag if you want check the playability
// of a file or for detecting the format (samplerate,bits,channels)
// with the function BSNWaveGetLastFormat()

#define BSNW_PLAY_POS		0x20
// Play FROM/TO  The pointer in parent must point to a structure
// from the type BSWavPlayPositions defining the startpoint (ms)
// and the time (ms) to be played

/////////////////////////////////////////////////////////////////////

//
// RespondTypes
// Return value from BSNWavePlayFile()
//

#define BSNW_STATUS_OK          0
// No Errors

#define BSNW_ABORT              1
// Abort by user or BSNWaveStop()

#define BSNW_TIMEOUT            2
// Timeouterror

#define BSNW_HARDWARE_NOT_READY 3
// soundcard hardware not ready

#define BSNW_MEMORY_ERROR       4
// memory error

#define BSNW_NOT_FREE           5
// Soundcard is allocated by another thread

#define BSNW_UNKNOWN_WAVE_FORMAT 6
// Unknown Waveformat -> cannot play

#define BSNW_WRONG_DRIVER       7
// driver does not support BS-NewWave technology

#define BSNW_PLAY_FINISHED      255
// for internal use

//
// PlayStatusFlags
//

#define BSNW_STATUS_PLAY_FILE   1
// BSNWavePlayFile() is running

#define BSNW_STATUS_PLAY_MEM    2
// BSNWavePlayMemory() is running

#define BSNW_WAIT_TIMEOUT       100
// Value for Timeout            value * 10ticks

#define BSNW_BUFFER_SIZE        8192
// default buffer size for Playcache and DMA-buffer

 /*-----------------------------------------------

		Structures

  -----------------------------------------------*/

typedef struct {
	dword		BWPS_current;		// played Bytes
        dword		BWPS_full;		// Bytes to play
	word		BWPS_level;		// "Levelmeter"
} BSWavPlayStates;

typedef struct {
	dword		BWPP_start;		// Startposition (ms)
	dword		BWPP_stop;		// Stopposition  (ms)

} BSWavPlayPositions;


/*-----------------------------------------------

 *      Exported functions

 *-----------------------------------------------*/


extern  int _pascal _export BSNWavePlayFile(FileHandle  fh,
				    word        playFlags,
				    optr        parent);
// Playing  WAV-file with/without Statebox (Rate, Bits, Channels, Time)
// returns Returnvalue of type RespondTypes

/*-----------------------------------------------*/


extern int _pascal _export BSNWavePlayCallback(BSWavFormChunk *bfc,
				       dword       bytes,
				       word        playFlags,
				       optr        parent,
				       PCB(word,routine,(void *,word)));
// Play Sampledata continuosly (Receiving data per Callback-function)
// returns Returnvalue from type RespondTypes
// Interface for MP3-Player !!!

/*-----------------------------------------------*/


extern  void    _pascal _export BSNWaveStop(void);
// Stopping NewWave-Output

/*-----------------------------------------------*/

extern  byte  _pascal  _export BSNWaveSetPause(byte mode);
// NewWave-Output PAUSE (Request, Pause, Continue)
// IN:  byte    mode    0 = Request Pausestate
//                      1 = PAUSE
//                      2 = continue from PAUSE
// returns the current PAUSE-mode


/*-----------------------------------------------*/

dword _pascal _export BSNWaveGetLastFormat(dword 	*sampleRate,
				   word 	*channels,
				   word 	*bits);
// returns the format of the last played WAV-file
// dword --> size of data (bytes)

/*-----------------------------------------------*/

extern  Boolean _pascal _export BSNWaveCheckDriver(word flags,
					   word testValue);
// checking driver for NewWave capability
// returns TRUE if the driver support BS-NewWave

/*-----------------------------------------------*/

extern int _pascal BSNWavePlayMemory(   BSWavFormChunk  *bfc,
					void            *buffer,
					word            len,
					word            playFlags);
// kurzes Sample einmal oder dauerhaft abspielen
// NOT IMPLEMENTED !

/*-----------------------------------------------*/

extern  word    _pascal _export BSNWaveGetAIState(word options);
// setting bsOptions and reading AutoInit-State from driver
// OUT: word    High-Byte = 0 -> untere Bufferh�lfte
//              Low- Byte = IRQ-Counter

/*-----------------------------------------------*/

extern  Boolean _pascal _export BSNWavGetMaxProperties( word *maxRate,
							byte *maxChannels,
							byte *maxBits);
// Getting max. Samplerate, Channels, Bitdepth from driver
// returns TRUE if the L/R-channels must be swapped
// Workaround for a bug in the SB-Pro hardware

/*-----------------------------------------------*/

extern word     _pascal _export BSNWaveGetStatus(void);
// reading dacStatus and bsStatus from driver
// Use the macros BSEXDACSTATUS and BSEXBSSTATUS
// for extracting the values !

/*-----------------------------------------------*/

extern word     _pascal _export BSNWAllocSecBuffer(byte **ptr,
					   word len);
// Allocating Secondarybuffer for AI-Playback
// returns the real size of the allocated buffer

/*-----------------------------------------------*/

extern  Boolean _pascal  _export BSNWaveStopRecOrPlay(void *secBuf);
// Stopping Recording/Playing and freeing Secondarybuffer
// returns TRUE on any errors

/*-----------------------------------------------*/

dword   _pascal BSNWaveCalcPlaytimeText(char    *textBuffer,
					dword   current,
					dword   full,
					dword   rate,
					int     mode);
// Create String for Timedisplay

/*-----------------------------------------------*/


int _pascal _export BSNWaveGetPlayState( BSWavPlayStates *playStates);
// Requesting playstate


/*-----------------------------------------------*/

// for internal use only (Exportnotwendigkeit pruefen !)

extern  Boolean _pascal LibRecEntry(    LibraryCallType type,
					GeodeHandle     client);
extern  void    _pascal BSCallDriver (void);            //intern
extern  Boolean _pascal _export BSNWavLoadDriver(GeodeLoadError *gle,
					 char           *name);

/*-----------------------------------------------*/

void    BSNWaveDialogUnknownFormat(word formatID);
// Dialogue "Unknown Waveformat"


/*-----------------------------------------------*/

#ifdef  __HIGHC__

pragma Alias(BSNWLibEntry,              "BSNWLIBENTRY");
pragma Alias(BSNWavLoadDriver,          "BSNWAVLOADDRIVER");
pragma Alias(BSNWaveStop,               "BSNWAVESTOP");
pragma Alias(BSNWaveStopRecOrPlay,      "BSNWAVESTOPRECORPLAY");
pragma Alias(BSNWavGetMaxProperties,    "BSNWAVGETMAXPROPERTIES");
pragma Alias(BSNWavePlayMemory,         "BSNWAVEPLAYMEMORY");
pragma Alias(BSNWAllocSecBuffer,        "BSNWALLOCSECBUFFER");
pragma Alias(BSNWavePlayFile,           "BSNWAVEPLAYFILE");
pragma Alias(BSNWaveGetStatus,          "BSNWAVEGETSTATUS");
pragma Alias(BSNWaveGetAIState,         "BSNWAVEGETAISTATE");
pragma Alias(BSNWaveSetPause,           "BSNWAVESETPAUSE");
pragma Alias(BSNWavePlayCallback,       "BSNWAVEPLAYCALLBACK");
pragma Alias(BSNWaveCheckDriver,        "BSNWAVECHECKDRIVER");
pragma Alias(BSNWaveCalcPlaytimeText,   "BSNWAVECALCPLAYTIMETEXT");
pragma Alias(BSNWaveGetPlayState,   	"BSNWAVEGETPLAYSTATE");
pragma Alias(BSNWaveGetLastFormat,   	"BSNWAVEGETLASTFORMAT");

#endif

@endlib

