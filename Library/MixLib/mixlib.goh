/**********************************************************

 	Projekt:	BestSound

 	Module:		Mixer-Library

 	File:		MIXLIB.GOH

 	Autor:		Dirk Lausecker


 Description:
 	- The number of channels for controlling the mixerchip
          can differ from lower than 10 (SB-mono) to more than
	  20 channels (SB16)
        - The channels will be addressed with the token-number
        - Three different Channeltypes are defined
          * Slider
          * BooleanGroup
          * Itemgroup
        - Three different Positions in the BS-Mixer UI are usable
          * Frontpanel (only Sliders)
          * Recording settings (only Boolean-/Itemgroups)
          * Other settings (only Boolean-/Itemgroups)
        - The BS-Mixer will use the function BSMixerSpecValue()
          for resizing and naming the own UI

 **********************************************************/

@include <stdapp.goh>
#include "sound.h"
#include <library.h>

@deflib mixlib

/*-----------------------------------------------

  	Constants

  -----------------------------------------------*/

//Texttokens
#define	BSMX_TOKEN_MASTER	1
#define	BSMX_TOKEN_MIDI		2
#define	BSMX_TOKEN_CD		3
#define	BSMX_TOKEN_VOICE	4	//WAV
#define	BSMX_TOKEN_LINE		5
#define	BSMX_TOKEN_MIC		6
#define	BSMX_TOKEN_SPEAKER	7
#define	BSMX_TOKEN_TREBLE	8
#define	BSMX_TOKEN_BASS		9
#define	BSMX_TOKEN_IN_FLT	10	//0x0C:5 Bool	Pro
#define	BSMX_TOKEN_LOWPASS	11	//0x0C:3 Bool
#define	BSMX_TOKEN_INP_SRC	12	//0x0C:2,1 Item
#define	BSMX_TOKEN_OUT_FLT	13	//0x0E:5 Bool
#define	BSMX_TOKEN_STEREO	14	//0x0E:1 Bool
#define	BSMX_TOKEN_OUT_MX_SW	15	//0x3C   Bool
#define	BSMX_TOKEN_IN_MX_SW_L	16	//0x3D   Bool
#define	BSMX_TOKEN_IN_MX_SW_R	17	//0x3E   Bool
#define	BSMX_TOKEN_IN_GAIN_L	18
#define	BSMX_TOKEN_IN_GAIN_R	19
#define	BSMX_TOKEN_OUT_GAIN_L	20
#define	BSMX_TOKEN_OUT_GAIN_R	21
#define	BSMX_TOKEN_AGC		22
#define	BSMX_TOKEN_MIDI_L	23
#define	BSMX_TOKEN_MIDI_R	24
#define	BSMX_TOKEN_LINE_L       25
#define	BSMX_TOKEN_LINE_R       26
#define	BSMX_TOKEN_CD_L		27
#define	BSMX_TOKEN_CD_R		28
#define	BSMX_TOKEN_GAIN_0       29
#define	BSMX_TOKEN_GAIN_1       30
#define	BSMX_TOKEN_GAIN_2       31
#define	BSMX_TOKEN_GAIN_3       32
#define	BSMX_TOKEN_OFF		33
#define	BSMX_TOKEN_ON		34
#define	BSMX_TOKEN_ACTIVE	35
#define	BSMX_TOKEN_INACT	36

//Valuetypes (valType)
#define	VAL_TYPE_SLIDER		1
#define	VAL_TYPE_ITEM		2
#define	VAL_TYPE_BOOL		3

/*-----------------------------------------------

  	Structures

  -----------------------------------------------*/

typedef struct{
		byte	valVisible;		// Sichtbarkeit
                byte	valStereoFlag;		// TRUE = Stereo
                byte	valTarget;		// 1=Mixer 2=Record 3=Other
		word	valRange;		// Wertebereich
                word	valToken;		// Texttoken 1,2,3,...32
		byte	valType;		// 0=none 1=Slider 2=Item 3=Boolean
		byte	valPos;			// Position des Sliders 0,1,2...
} MixerValue;

/*-----------------------------------------------*/

extern	word 	_pascal BSMixerGetState(void);
// returns 0x8000 if Demomode is active
// or 0x4000 if the driver does not support mixercontrol
// or 0x0000 if everything is OK

/*-----------------------------------------------*/

extern	word 	_pascal	BSMixerGetSubToken(word token,
					   word identifier);
// returns Subtoken

/*-----------------------------------------------*/

extern  void	_pascal BSMixerSpecValue(word 	     valNum,
					 MixerValue  *value);
// returns description of an settings channel
// in the structure MixerValue (pointed by value)

/*-----------------------------------------------*/

extern	void 	_pascal BSMixerGetTokenText(word token,
					    char *tokenText);
// converting Token (Number) to text

/*-----------------------------------------------*/

extern	void	_pascal BSMixerSetValue(word token,
					byte dataType,
					byte value1,
					byte value2);
// setting channel defined by token
// depending from the dataType, the value1 and value2
// will be used for different settings

/*-----------------------------------------------*/

extern	word	_pascal BSMixerGetValue(word token,
					byte dataType);
// returns the value of one channel defined by token

/*-----------------------------------------------*/

extern	word	_pascal BSMixerGetCap (word *dsp);
// returns the DSP-version (pointed by dsp) and
// the number the channels

/*-----------------------------------------------*/

extern	Boolean	_pascal LibMixEntry(LibraryCallType 	type,
				    GeodeHandle 	client);
// Entrypoint

/*-----------------------------------------------*/

extern 	Boolean	_pascal BSMixerLoadDriver(GeodeLoadError *gle,
					  char 		 *name);
// Store the handle of the soundcard driver in a global variable
// for internal use

/*-----------------------------------------------*/

extern	void 	_pascal BSCallDriver (void);
//internal use

/*-----------------------------------------------*/


#ifdef  __HIGHC__

pragma Alias(BSMixerGetState,"BSMIXERGETSTATE");
pragma Alias(BSMixerGetSubToken,"BSMIXERGETSUBTOKEN");
pragma Alias(BSMixerSpecValue,"BSMIXERSPECVALUE");
pragma Alias(BSMixerGetTokenText,"BSMIXERGETTOKENTEXT");
pragma Alias(BSMixerLoadDriver,"BSMIXERLOADDRIVER");
pragma Alias(BSMixerSetValue,"BSMIXERSETVALUE");
pragma Alias(BSMixerGetValue,"BSMIXERGETVALUE");
pragma Alias(BSMixerGetCap,"BSMIXERGETCAP");
pragma Alias(LibMixEntry,"LIBMIXENTRY");
#endif

@endlib

