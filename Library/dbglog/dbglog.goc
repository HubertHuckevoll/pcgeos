#include <geos.h>
#include <file.h>
#include <timedate.h>
#include <Ansi/string.h>
#include <Ansi/stdio.h>
#include <timedate.h>
#include <localize.h>
#include <dbglog.h>

#define LOG_FILENAME "dbglog.txt"

FileHandle _export _DbgOpenLogFile(Boolean truncate)
{
    FileHandle fh;

    FilePushDir();
    FileSetStandardPath(SP_DOCUMENT);

    if (truncate) {
        FileDelete(LOG_FILENAME);
    }

    fh = FileOpen(LOG_FILENAME, FILE_ACCESS_RW | FILE_DENY_W);
    if (fh == NullHandle) {
        fh = FileCreate(LOG_FILENAME,
                        (FILE_CREATE_TRUNCATE | FCF_NATIVE) |
                        (FILE_ACCESS_RW | FILE_DENY_W),
                        0);
    }

    FilePopDir();
    return fh;
}

void _export LogInit(void)
{
    FileHandle fh;

    fh = _DbgOpenLogFile(TRUE);
    if (fh != NullHandle) {
        FileClose(fh, (Boolean)0);
    }
}

void _export LogStart(void)
{
  FileHandle fh;
  TimerDateAndTime now;
  char buffer[64];
  word length;

  fh = _DbgOpenLogFile(FALSE);
  if (fh == NullHandle) return;

  TimerGetDateAndTime(&now);
  LocalFormatDateTime(buffer, DTF_LONG_NO_WEEKDAY, &now);

  FilePos(fh, 0, FILE_POS_END);
  FileWrite(fh, (void *)"=== LOG START: ", 15, (Boolean)0);

  length = strlen(buffer);
  FileWrite(fh, (void *)buffer, length, (Boolean)0);
  FileWrite(fh, (void *)" ===\r\n", 6, (Boolean)0);

  FileClose(fh, (Boolean)0);
}

void _export Log(const char *fmt, ...)
{
    FileHandle fh;
    char buffer[256];
    int len;
    va_list args;

    va_start(args, fmt);
    len = vsprintf(buffer, fmt, args);
    va_end(args);

    fh = _DbgOpenLogFile(FALSE);
    if (fh == NullHandle) return;

    FilePos(fh, 0L, FILE_POS_END);
    FileWrite(fh, (void *)buffer, len, (Boolean)0);
    FileWrite(fh, (void *)"\r\n", 2, (Boolean)0);
    FileClose(fh, (Boolean)0);
}

void _export LogEnd(void)
{
    FileHandle fh;

    fh = _DbgOpenLogFile(FALSE);
    if (fh == NullHandle) return;

    FilePos(fh, 0, FILE_POS_END);
    FileWrite(fh, (void *)"=== LOG END ===\r\n", 17, (Boolean)0);
    FileClose(fh, (Boolean)0);
}

void _export LogStrSegment(const char *str, DbgStrMode mode, word startOrLen, word end)
{
    char segment[256];
    word len, from, to;

    len = strlen(str);
    from = 0;
    to = len;

    switch (mode) {
        case DBG_STR_HEAD:
            if (startOrLen < len) {
                to = startOrLen;
            }
            break;
        case DBG_STR_TAIL:
            if (startOrLen < len) {
                from = len - startOrLen;
            }
            break;
        case DBG_STR_RANGE:
            if (startOrLen < len) {
                from = startOrLen;
            }
            if (end < len) {
                to = end;
            }
            break;
        case DBG_STR_ALL:
        default:
            from = 0;
            to = len;
            break;
    }

    if ((to > from) && ((to - from) < sizeof(segment))) {
        memcpy(segment, str + from, to - from);
        segment[to - from] = '\0';
        Log("%s", segment);
    }
}

void _export LogStrHead(const char *str, word len)
{
  LogStrSegment(str, DBG_STR_HEAD, len, 0);
}

void _export LogStrTail(const char *str, word len)
{
  LogStrSegment(str, DBG_STR_TAIL, len, 0);
}

void _export LogStrRange(const char *str, word from, word to)
{
  LogStrSegment(str, DBG_STR_RANGE, from, to);
}

void _export LogStrAll(const char *str)
{
  LogStrSegment(str, DBG_STR_ALL, 0, 0);
}

void _export LogByte(const char *label, byte val)
{
  Log("%s: %u", label, (word)val);
}

void _export LogSByte(const char *label, sbyte val)
{
  Log("%s: %d", label, (sword)val);
}

void _export LogWord(const char *label, word val)
{
  Log("%s: %u (0x%04x)", label, val, val);
}

void _export LogSWord(const char *label, sword val)
{
  Log("%s: %d", label, val);
}

void _export LogDWord(const char *label, dword val)
{
  Log("%s: %lu (0x%08lx)", label, val, val);
}

void _export LogSDWord(const char *label, sdword val)
{
  Log("%s: %ld", label, val);
}

void _export LogBoolean(const char *label, Boolean val)
{
  Log("%s: %s", label, val ? "TRUE" : "FALSE");
}

void _export LogPtr(const char *label, void *ptr)
{
  Log("%s: %Fp", label, ptr);
}

void _export LogChunkHandle(const char *label, ChunkHandle ch)
{
  Log("%s: chunk 0x%04x", label, ch);
}

void _export LogMemHandle(const char *label, MemHandle mh)
{
  Log("%s: mem handle 0x%04x", label, mh);
}

void _export LogFileHandle(const char *label, FileHandle fh)
{
  Log("%s: file handle 0x%04x", label, fh);
}

void _export LogOptr(const char *label, optr o)
{
  Log("%s: optr 0x%08lx", label, o);
}

