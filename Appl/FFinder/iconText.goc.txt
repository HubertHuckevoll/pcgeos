/*
@method OpenWithAppLaunchTriggerClass, MSG_SET_TRIGGER_MONIKER
{
    Boolean             isMoniker = FALSE;
    ChunkHandle         iconMoniker = NULL;
    ChunkHandle         textMoniker = NULL;
    optr                finalMoniker = NULL;
    word                chunkSize = NULL;
    DisplayScheme	    ds;
    MemHandle           mhHeap = NullHandle;

    mhHeap = MemAllocLMem(LMEM_TYPE_GENERAL, sizeof(LMemBlockHeader));
    MemLock(mhHeap);

    @call GeodeGetAppObject(0)::MSG_GEN_APPLICATION_GET_DISPLAY_SCHEME(&ds);

    isMoniker = TokenLoadMonikerChunk(
        TOKEN_CHARS(tok->GT_chars[0],tok->GT_chars[1],tok->GT_chars[2],tok->GT_chars[3]),
        tok->GT_manufID,
        ds.DS_displayType,
        ((VMSF_GSTRING | VMSF_COPY_CHUNK) | (VMS_TOOL << VMSF_STYLE_OFFSET)),
        mhHeap,
        &chunkSize,
        &iconMoniker
    );

    isMoniker = TokenLoadMonikerChunk(
        TOKEN_CHARS(tok->GT_chars[0],tok->GT_chars[1],tok->GT_chars[2],tok->GT_chars[3]),
        tok->GT_manufID,
        ds.DS_displayType,
        (VMSF_COPY_CHUNK | (VMS_TEXT << VMSF_STYLE_OFFSET)),
        mhHeap,
        &chunkSize,
        &textMoniker
    );

    // @send oself::MSG_GEN_REPLACE_VIS_MONIKER_OPTR(ConstructOptr(mhHeap, iconMoniker), VUM_NOW);
    // @send oself::MSG_GEN_REPLACE_VIS_MONIKER_OPTR(ConstructOptr(mhHeap, textMoniker), VUM_NOW);

    if (iconMoniker && textMoniker)
    {
        ECLMemExists(ConstructOptr(OptrToHandle(oself), textMoniker));
        ECLMemExists(ConstructOptr(OptrToHandle(oself), iconMoniker));

        finalMoniker = UserCreateIconTextMoniker(
            ConstructOptr(mhHeap, textMoniker),
            ConstructOptr(mhHeap, iconMoniker),
            mhHeap,
            (word) 11,
            0
        );

        if (finalMoniker) @send oself::MSG_GEN_REPLACE_VIS_MONIKER_OPTR(finalMoniker, VUM_NOW);
    }

    MemUnlock(mhHeap);
    MemFree(mhHeap);
}
*/